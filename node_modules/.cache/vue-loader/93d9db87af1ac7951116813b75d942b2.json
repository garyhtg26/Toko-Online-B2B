{"remainingRequest":"/Applications/XAMPP/xamppfiles/htdocs/vuejs-firebase-shopping-cart/Toko-Online-B2B/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Applications/XAMPP/xamppfiles/htdocs/vuejs-firebase-shopping-cart/Toko-Online-B2B/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Applications/XAMPP/xamppfiles/htdocs/vuejs-firebase-shopping-cart/Toko-Online-B2B/node_modules/vue-loader/lib/index.js??vue-loader-options!/Applications/XAMPP/xamppfiles/htdocs/vuejs-firebase-shopping-cart/Toko-Online-B2B/src/components/Header.vue?vue&type=template&id=61dd7a3d&scoped=true&","dependencies":[{"path":"/Applications/XAMPP/xamppfiles/htdocs/vuejs-firebase-shopping-cart/Toko-Online-B2B/src/components/Header.vue","mtime":1594189618502},{"path":"/Applications/XAMPP/xamppfiles/htdocs/vuejs-firebase-shopping-cart/Toko-Online-B2B/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Applications/XAMPP/xamppfiles/htdocs/vuejs-firebase-shopping-cart/Toko-Online-B2B/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Applications/XAMPP/xamppfiles/htdocs/vuejs-firebase-shopping-cart/Toko-Online-B2B/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Applications/XAMPP/xamppfiles/htdocs/vuejs-firebase-shopping-cart/Toko-Online-B2B/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}