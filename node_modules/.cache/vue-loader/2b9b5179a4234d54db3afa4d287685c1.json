{"remainingRequest":"/Applications/XAMPP/xamppfiles/htdocs/vuejs-firebase-shopping-cart/node_modules/vue-loader/lib/index.js??vue-loader-options!/Applications/XAMPP/xamppfiles/htdocs/vuejs-firebase-shopping-cart/src/components/ShoppingCart.vue?vue&type=style&index=0&id=ee9c2650&lang=scss&scoped=true&","dependencies":[{"path":"/Applications/XAMPP/xamppfiles/htdocs/vuejs-firebase-shopping-cart/src/components/ShoppingCart.vue","mtime":1588357772752},{"path":"/Applications/XAMPP/xamppfiles/htdocs/vuejs-firebase-shopping-cart/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Applications/XAMPP/xamppfiles/htdocs/vuejs-firebase-shopping-cart/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Applications/XAMPP/xamppfiles/htdocs/vuejs-firebase-shopping-cart/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Applications/XAMPP/xamppfiles/htdocs/vuejs-firebase-shopping-cart/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/Applications/XAMPP/xamppfiles/htdocs/vuejs-firebase-shopping-cart/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Applications/XAMPP/xamppfiles/htdocs/vuejs-firebase-shopping-cart/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoubGlzdC1zaG9wcGluZy1jYXJ0LWxlYXZlLWFjdGl2ZSB7CiAgdHJhbnNpdGlvbjogYWxsIDAuNHM7Cn0KCi5saXN0LXNob3BwaW5nLWNhcnQtbGVhdmUtdG8gewogIG9wYWNpdHk6IDA7CiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKDUwcHgpOwp9CgoudGFibGUtc20gewogIGZvbnQtc2l6ZTogMC44NzVyZW07CiAgOjp2LWRlZXAgaDQgewogICAgZm9udC1zaXplOiAxLjI1cmVtOwogIH0KfQo="},{"version":3,"sources":["ShoppingCart.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6KA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"ShoppingCart.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"container table-responsive\">\n    <table id=\"cart\" class=\"table table-hover table-sm\">\n      <thead>\n        <tr>\n          <th style=\"width:50%\">Product</th>\n          <th style=\"width:10%\">Price</th>\n          <th style=\"width:8%\">Quantity</th>\n          <th style=\"width:22%\" class=\"text-center\">Subtotal</th>\n          <th style=\"width:10%\"></th>\n        </tr>\n      </thead>\n\n      <transition-group name=\"list-shopping-cart\" tag=\"tbody\">\n        <app-cart-item\n          v-for=\"cartItem in cartItemList\"\n          :cartItem=\"cartItem\"\n          :key=\"cartItem.id\"\n        ></app-cart-item>\n      </transition-group>\n\n      <tfoot>\n        <tr class=\"d-table-row d-sm-none\">\n          <td class=\"text-center\">\n            <strong>Total ${{ cartValue }}</strong>\n          </td>\n        </tr>\n        <tr>\n          <td>\n            <button class=\"btn btn-warning\" @click=\"saveShoppingCartLocal\">\n              <i class=\"fa fa-angle-left\"></i> Save and Continue Shopping\n            </button>\n          </td>\n          <td colspan=\"2\" class=\"d-none d-sm-table-cell\"></td>\n          <td class=\"d-none d-sm-table-cell text-center\">\n            <strong>Total ${{ cartValue }}</strong>\n          </td>\n          <td class=\"px-0\">\n            <button class=\"btn btn-success\" @click=\"checkout\">\n              <span class=\"text-nowrap\"\n                >Checkout <i class=\"fa fa-angle-right d-inline\"></i\n              ></span>\n            </button>\n          </td>\n        </tr>\n      </tfoot>\n    </table>\n  </div>\n</template>\n\n<script>\nimport { mapActions, mapGetters } from 'vuex'\nimport CartItem from './cart/CartItem.vue'\nexport default {\n  computed: {\n    ...mapGetters([\n      'cartItemList',\n      'isLoggedIn',\n      'products',\n      'currentUser',\n      'cartValue',\n    ]),\n  },\n  components: {\n    appCartItem: CartItem,\n  },\n  methods: {\n    ...mapActions([\n      'saveShoppingCart',\n      'addMessage',\n      'saveToTransaction',\n      'clearCart',\n    ]),\n    checkValidCart(itemList, prodList) {\n      let isValid = true\n      let message = ''\n\n      itemList.map((item) => {\n        for (let prodIdx = 0; prodIdx < prodList.length; prodIdx++) {\n          if (prodList[prodIdx].id == item.id) {\n            if (prodList[prodIdx].quantity < item.quantity) {\n              message = `Only ${prodList[prodIdx].quantity} ${item.title} available in stock`\n              isValid = false\n              return\n            }\n            break\n          }\n        }\n      })\n      return {\n        isValid,\n        message,\n      }\n    },\n    saveShoppingCartLocal() {\n      if (this.isLoggedIn) {\n        let { isValid, message } = this.checkValidCart(\n          this.cartItemList,\n          this.products\n        )\n\n        if (isValid) {\n          this.saveShoppingCart({\n            cartItemList: this.cartItemList,\n            uid: this.currentUser.uid,\n          }).then(() => {\n            this.addMessage({\n              messageClass: 'success',\n              message: 'Your shopping cart is saved successfully',\n            })\n            this.$router.push('/')\n          })\n        } else {\n          this.addMessage({\n            messageClass: 'danger',\n            message: message,\n          })\n        }\n      } else {\n        this.addMessage({\n          messageClass: 'warning',\n          message: 'Please login to save your cart',\n        })\n      }\n    },\n    checkout() {\n      if (this.isLoggedIn) {\n        if (!this.cartItemList || this.cartItemList.length == 0) {\n          this.addMessage({\n            messageClass: 'warning',\n            message: 'Your cart is empty!',\n          })\n          return\n        }\n        let { isValid, message } = this.checkValidCart(\n          this.cartItemList,\n          this.products\n        )\n\n        if (isValid) {\n          this.saveToTransaction({\n            cartItemList: this.cartItemList,\n            uid: this.currentUser.uid,\n          }).then(() => {\n            this.addMessage({\n              messageClass: 'success',\n              message: 'Your order has been successfully processed!',\n            })\n            this.saveShoppingCart({\n              cartItemList: [],\n              uid: this.currentUser.uid,\n            })\n            this.clearCart()\n            this.$router.push('/')\n          })\n        } else {\n          this.addMessage({\n            messageClass: 'danger',\n            message: message,\n          })\n        }\n      } else {\n        this.addMessage({\n          messageClass: 'warning',\n          message: 'Please login to checkout',\n        })\n      }\n    },\n  },\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.list-shopping-cart-leave-active {\n  transition: all 0.4s;\n}\n\n.list-shopping-cart-leave-to {\n  opacity: 0;\n  transform: translateX(50px);\n}\n\n.table-sm {\n  font-size: 0.875rem;\n  ::v-deep h4 {\n    font-size: 1.25rem;\n  }\n}\n</style>\n"]}]}